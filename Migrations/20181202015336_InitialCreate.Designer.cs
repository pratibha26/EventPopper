// <auto-generated />
using System;
using EventPopper.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventPopper.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20181202015336_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("EventPopper.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentBy");

                    b.Property<DateTime?>("CommentDateTime");

                    b.Property<string>("CommentText");

                    b.Property<int>("EventId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("EventPopper.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CouponCategory");

                    b.Property<string>("CouponName");

                    b.Property<int>("Discount");

                    b.Property<int>("EventId");

                    b.Property<DateTime?>("Validity");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("EventPopper.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AvailableSeats");

                    b.Property<decimal>("Discount");

                    b.Property<DateTime>("EventDate");

                    b.Property<string>("EventImageUrl");

                    b.Property<DateTime>("EventTime");

                    b.Property<string>("HostName");

                    b.Property<double>("Latitude");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NumberOfTickets");

                    b.Property<string>("Rating");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<decimal>("TicketPrice");

                    b.Property<int>("TotalSeats");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EventPopper.Models.Comment", b =>
                {
                    b.HasOne("EventPopper.Models.Event", "Event")
                        .WithMany("Comments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventPopper.Models.Coupon", b =>
                {
                    b.HasOne("EventPopper.Models.Event", "Event")
                        .WithMany("Coupons")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
